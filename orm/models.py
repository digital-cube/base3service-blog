from sqlalchemy import Column, String, DateTime, Text, ForeignKey, Integer
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import desc
from sqlalchemy.orm import relationship

from base import orm
from sqlalchemy import inspect, UniqueConstraint
import bs4, slugify


class PageTemplate(orm.BaseSql, orm.sql_base):
    __tablename__ = 'page_templates'

    name = Column(String, unique=True, nullable=False)
    description = Column(String)

    initial_nr_posts = Column(Integer, default=1)


class BlogPage(orm.BaseSql, orm.sql_base):
    __tablename__ = 'blog_pages'

    title = Column(String)
    id_template = Column(ForeignKey(PageTemplate.id), index=True, nullable=False)
    template = relationship(PageTemplate, uselist=False)


class TranslatedPage(orm.BaseSql, orm.sql_base):
    __tablename__ = 'translated_pages'

    id_page = Column(ForeignKey(BlogPage.id), index=True, nullable=False)
    page = relationship(BlogPage, uselist=False, foreign_keys=[id_page])

    title = Column(String, nullable=False, index=True)
    body = Column(Text)
    slug = Column(String, nullable=False)
    language = Column(String(2), nullable=False, index=True)

    thumbnail = Column(String(255), nullable=True, default=None)
    thumbnail_alt_text = Column(String(255), nullable=True, default=None)

    status = Column(Integer, default=0)  # 0-inactive, 1-draft, 2-review, 3-active
    priority = Column(Integer, default=0)

    __table_args__ = (
        UniqueConstraint('slug', 'language', name='page_group_pages_lang_ux_1'),
        UniqueConstraint('id_page', 'language', name='page_lang')
    )


class Post(orm.BaseSql, orm.sql_base):
    __tablename__ = 'posts'

    id_user = Column(UUID, nullable=False, index=True)

    slug = Column(String)

    title = Column(String)
    subtitle = Column(String)
    body = Column(Text)

    language = Column(String(2), nullable=True, index=True)
    category = Column(String)

    id_page = Column(ForeignKey(TranslatedPage.id), index=True, nullable=True)
    page = relationship(TranslatedPage, foreign_keys=[id_page])

    def slugify(self, slug=None, commit=False):
        session = inspect(self).session

        if not session:
            raise NameError("Session not defined")

        if slug:
            if session.query(Post).filter(Post.slug == slug).count() > 0:
                raise NameError("Given slug can not be used")
                # return False

            self.slug = slug
            if commit:
                session.commit()
                return True

        _slug = slugify.slugify(self.title)
        slug = _slug

        attempt = 1
        self.slug = None
        while attempt <= 100:
            if session.query(Post).filter(Post.slug == slug).count() > 0:
                slug = _slug + '-' + attempt
                continue
            else:
                self.slug = slug
                break

        if not self.slug:
            raise NameError("Slug could not be autogenerated in {attempt} attempts")

        if commit:
            session.commit()

        return True


    def index4search(self, commit=False):

        session = inspect(self).session

        if not session:
            raise NameError("Session not defined")

        t = self.title.lower().strip() if self.title else ''
        s = self.subtitle.lower().strip() if self.subtitle else ''
        b = self.body.lower().strip() if self.body else ''
        if b:
            b = bs4.BeautifulSoup(b, 'html.parser').get_text()

        d = []
        # d.extend(self.slug)
        d.extend(t.split(' '))
        d.extend(s.split(' '))
        d.extend(b.split(' '))
        search = ' '.join([x for x in d if x])

        try:
            db_search = session.query(PostSearch).filter(PostSearch.post == self).one_or_none()
        except Exception as e:
            print(e)

        if not db_search:
            db_search = PostSearch(post=self)
            session.add(db_search)

        db_search.search = search

        if commit:
            session.commit()


class PostSearch(orm.BaseSql, orm.sql_base):
    __tablename__ = 'post_search'

    id_post = Column(ForeignKey(Post.id), index=True, unique=True)
    post = relationship(Post, foreign_keys=[id_post])

    search = Column(Text)


class Tag(orm.BaseSql, orm.sql_base):
    __tablename__ = 'tags'

    name = Column(String, unique=True)
    count = Column(Integer, nullable=False, default=0)


class Post2Tag(orm.BaseSql, orm.sql_base):
    __tablename__ = 'post2tag'

    id_tag = Column(ForeignKey(Tag.id), index=True, primary_key=True)
    id_post = Column(ForeignKey(Post.id), index=True, primary_key=True)

    tag = relationship(Tag, foreign_keys=[id_tag])
    post = relationship(Post, foreign_keys=[id_post])


class Photo(orm.BaseSql, orm.sql_base):
    __tablename__ = 'photos'

    id_user = Column(UUID, index=True)
    id_post = Column(UUID, index=True)

    format = Column(String(8))
    filename = Column(String(128), nullable=True)

    width = Column(Integer)
    height = Column(Integer)
    filesize = Column(Integer)

    hash = Column(String(64), nullable=True)
